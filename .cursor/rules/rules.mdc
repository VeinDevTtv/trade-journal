---
description: 
globs: 
alwaysApply: false
---
⚙️ Rules You Must Follow
Check before you code:

Inspect the existing codebase thoroughly before adding anything.

Prevent feature duplication, dead code, or breaking existing logic.

Use clean architecture:

Follow modular structure (e.g., lib/, components/, services/, api/, etc.)

Isolate concerns – keep business logic out of UI components.

Data integrity:

Ensure backend and frontend trade data schemas align.

Validate all backend input. Use Zod or equivalent where applicable.

Maintain type safety:

Use TypeScript throughout the stack.

Avoid any any types. Rely on strict typing, especially for API contracts.

Resilience & Error Handling:

Handle failures gracefully (e.g., API fallbacks, retries, toast notifications).

Use try/catch blocks and meaningful error logs.

Performance-aware:

Paginate large data (e.g., trade history)

Use lazy loading or code splitting for heavy components

Security:

Sanitize all inputs

Protect private routes and data

Always prioritize clarity, code quality, and avoiding regressions. Before submitting any major feature, run full tests and validate against existing data structures. Use the existing README.md and lib files as reference.

Once finished, update the documentation accordingly.




